{"version":3,"sources":["redux/actions/types.js","redux/actions/index.js","redux/containers/mapper.js","components/AppCounter.jsx","redux/containers/withBackgroundColorDispatch.js","redux/containers/withCounterDispatch.js","components/AppCounterDisplay.jsx","redux/containers/withCounterState.js","helpers.js","App.js","redux/containers/withBackgroundColorState.js","serviceWorker.js","redux/reducers/countReducer.js","redux/reducers/backgroundColorReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["INCREMENT_COUNT","DECREMENT_COUNT","SET_COUNT","RESET_COUNT","CHANGE_BACKGROUND_COLOR","incrementCount","type","decrementCount","changeBackgroundColor","resetCount","setCount","value","payload","mapCounterDispatchToProps","dispatch","onIncrementCount","onDecrementCount","onResetCount","onSetCount","mapCounterStateToProps","state","Object","objectSpread","countReducer","mapBackgroundColorDispatchToProps","onChangeBackgroundColor","mapBackgroundColorStateToProps","backgroundColorReducer","withCounterDispatch","WrappedComponent","connect","props","_useState","useState","_useState2","slicedToArray","countValue","setCountValue","react_default","a","createElement","style","textAlign","title","onClick","disabled","onChange","event","val","target","replace","fontSize","margin","withCounterState","count","randomRgb","r","Math","floor","random","concat","ghlinkStyle","backgroundColor","withBackgroundColorState","color","styles","container","match","map","num","reduce","cv","rel","href","components_AppCounter","components_AppCounterDisplay","Boolean","window","location","hostname","defaultState","blah","combineReducers","arguments","length","undefined","action","Number","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72bdfb79.chunk.js","sourcesContent":["export const INCREMENT_COUNT = \"INCREMENT_COUNT\";\r\nexport const DECREMENT_COUNT = \"DECREMENT_COUNT\";\r\nexport const SET_COUNT = \"SET_COUNT\";\r\nexport const RESET_COUNT = \"RESET_COUNT\";\r\nexport const CHANGE_BACKGROUND_COLOR = \"CHANGE_BACKGROUND_COLOR\";\r\n","import { \r\n    INCREMENT_COUNT, \r\n    DECREMENT_COUNT,\r\n    RESET_COUNT,\r\n    SET_COUNT,\r\n    CHANGE_BACKGROUND_COLOR \r\n} from './types.js';\r\n\r\n\r\nexport const incrementCount = () => ({\r\n    type: INCREMENT_COUNT,\r\n});\r\n\r\nexport const decrementCount = () => ({\r\n    type: DECREMENT_COUNT,\r\n});\r\n\r\nexport const changeBackgroundColor = () => ({\r\n    type: CHANGE_BACKGROUND_COLOR\r\n});\r\n\r\nexport const resetCount = () => ({\r\n    type: RESET_COUNT\r\n})\r\n\r\nexport const setCount = (value) => ({\r\n    type: SET_COUNT,\r\n    payload: value\r\n});","import { \r\n    incrementCount, decrementCount, changeBackgroundColor, setCount,\r\n    resetCount,\r\n} from '../actions';\r\n\r\n\r\nexport function mapCounterDispatchToProps(dispatch) {\r\n    return {\r\n        onIncrementCount: () => {\r\n            dispatch(incrementCount());\r\n        },\r\n        onDecrementCount: () => {\r\n            dispatch(decrementCount());\r\n        },\r\n        onResetCount: () => {\r\n            dispatch(resetCount());\r\n        },\r\n        onSetCount: (value) => {\r\n            dispatch(setCount(value));\r\n        }\r\n    }\r\n}\r\n\r\nexport function mapCounterStateToProps(state) {\r\n    return {\r\n        // Since we are using `combineReducers`, if we want to flatten the state from each reducer,\r\n        // we will need to destructure state for that particular reducer.\r\n        ...state.countReducer\r\n    }\r\n};\r\n\r\nexport function mapBackgroundColorDispatchToProps(dispatch) {\r\n    return {\r\n        onChangeBackgroundColor: () => {\r\n            dispatch(changeBackgroundColor());\r\n        }\r\n    }\r\n}\r\n\r\nexport function mapBackgroundColorStateToProps(state) {\r\n    return {\r\n        // Since we are using `combineReducers`, if we want to flatten the state from each reducer,\r\n        // we will need to destructure state for that particular reducer.\r\n        ...state.backgroundColorReducer\r\n    }\r\n};","import React, { useState } from 'react';\r\nimport { withCounterDispatch, withBackgroundColorDispatch } from '../redux/containers';\r\n\r\n\r\nfunction AppCounter(props) {\r\n    const [countValue, setCountValue] = useState('');\r\n\r\n    const handleSetCountInput = (event) => {\r\n        let val = event.target.value.replace(/[^0-9]/g, \"\"); // removes everything but numbers\r\n        setCountValue(val);\r\n    }\r\n\r\n    const handleSetCount = () => {\r\n        props.onSetCount(countValue);\r\n        setCountValue('');\r\n    }\r\n\r\n    return (\r\n        <div style={{ textAlign: \"center\" }}>\r\n            <h1>{props.title}</h1>\r\n            <button onClick={props.onDecrementCount}>Decrement (-)</button>\r\n            <button onClick={props.onIncrementCount}>Increment (+)</button>\r\n            <button onClick={\"\"}>Reset Count</button>\r\n            <div>\r\n                <button disabled={countValue ? false : true} onClick={handleSetCount}>Set Count</button>\r\n                <input value={countValue} onChange={handleSetCountInput} />\r\n            </div>\r\n            <div>\r\n                <button onClick={props.onChangeBackgroundColor}>Change Background</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default withCounterDispatch(\r\n    withBackgroundColorDispatch(\r\n        AppCounter\r\n    )\r\n);","import { connect } from 'react-redux';\r\nimport { mapBackgroundColorDispatchToProps } from './mapper.js';\r\n\r\n\r\nexport default function withBackgroundColorDispatch(WrappedComponent) {\r\n   return connect(\r\n       null,\r\n       mapBackgroundColorDispatchToProps,\r\n   )(WrappedComponent);\r\n}","import { connect } from 'react-redux';\r\nimport { mapCounterDispatchToProps } from './mapper.js';\r\n\r\n\r\nexport default function withCounterDispatch(WrappedComponent) {\r\n   return connect(\r\n       null,\r\n       mapCounterDispatchToProps,\r\n   )(WrappedComponent)\r\n}","import React from 'react';\r\nimport { withCounterState } from '../redux/containers';\r\n\r\n\r\nlet style = {\r\n    textAlign: \"center\",\r\n    fontSize: \"100px\",\r\n    margin: 0,\r\n}\r\n\r\nfunction AppCounterDisplay(props) {\r\n    return <p style={style}>{props.count}</p>\r\n}\r\n\r\nexport default withCounterState(AppCounterDisplay);","import { connect } from 'react-redux';\r\nimport { mapCounterStateToProps } from './mapper.js';\r\n\r\n\r\nexport default function withCounterState(WrappedComponent) {\r\n    return connect(\r\n        mapCounterStateToProps,\r\n        null,        \r\n    )(WrappedComponent)\r\n }","export function getDarkOrLightTextColorFromRgb(color) {\r\n    // Outputs whether text color should be white or black based upon the RGB value.\r\n    // If the RGB is light, we will need black text - if the RGB is dark, we will need white text.\r\n    return color.match(/\\d+/g)\r\n        .map(num => +num)\r\n        .reduce((a, cv) => a + cv) >= 255 * 3 / 2 \r\n            ? 'black' //true   // color is light - need black text\r\n            : 'white' //false; // color is dark - need white text\r\n}\r\n\r\nexport function randomRgb() {\r\n    let r = () => Math.floor(Math.random() * 256);\r\n    return `rgb(${r()}, ${r()}, ${r()})`;\r\n}","import React from 'react';\nimport AppCounter from './components/AppCounter';\nimport AppCounterDisplay from './components/AppCounterDisplay';\nimport { withBackgroundColorState } from './redux/containers';\nimport { getDarkOrLightTextColorFromRgb } from './helpers.js';\n\n\nconst ghlinkStyle = {\n    backgroundColor: 'white'\n}\n\n\nfunction App(props) {\n    const styles = {\n        container: {\n            margin: '100px',\n            backgroundColor: props.backgroundColor,\n            color: getDarkOrLightTextColorFromRgb(props.backgroundColor)\n        }\n    }\n\n    return (\n        <div style={styles.container}>\n            <h5 style={ghlinkStyle}>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/oze4/react-redux-poc\">\n                    GitHub Repo\n                </a>\n            </h5>\n            <AppCounter title=\"Counter\" />\n            <AppCounterDisplay />\n        </div>\n    );\n}\n\nexport default withBackgroundColorState(App);\n","import { connect } from 'react-redux';\r\nimport { mapBackgroundColorStateToProps } from './mapper.js';\r\n\r\n\r\nexport default function withBackgroundColorState(WrappedComponent) {\r\n    return connect(\r\n        mapBackgroundColorStateToProps,\r\n        null,        \r\n    )(WrappedComponent)\r\n }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { INCREMENT_COUNT, DECREMENT_COUNT, RESET_COUNT, SET_COUNT } from '../actions/types.js';\r\n\r\nlet defaultState = {\r\n    count: 0,\r\n    blah: 'meh',\r\n}\r\n\r\nexport default function countReducer(state = defaultState, action) {\r\n    switch(action.type) {\r\n        case INCREMENT_COUNT:\r\n            return { ...state, count: Number(state.count) + 1 }\r\n        case DECREMENT_COUNT:\r\n            return { ...state, count: Number(state.count) - 1 }\r\n        case RESET_COUNT:\r\n            return { ...state, count: 0 }\r\n        case SET_COUNT:\r\n            return { ...state, count: Number(action.payload) }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { CHANGE_BACKGROUND_COLOR } from '../actions/types.js';\r\nimport { randomRgb } from '../../helpers.js';\r\n\r\n\r\nlet defaultState = {\r\n    backgroundColor: randomRgb()\r\n}\r\n\r\nexport default function backgroundColorReducer(state = defaultState, action) {\r\n    switch(action.type) {\r\n        case CHANGE_BACKGROUND_COLOR:\r\n            return { ...state,\r\n                backgroundColor: randomRgb()\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport countReducer from './countReducer.js';\r\nimport backgroundColorReducer from './backgroundColorReducer.js';\r\n\r\n\r\nexport default combineReducers({\r\n    countReducer,\r\n    backgroundColorReducer\r\n});","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store.js';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}